version: 2.1

commands:
  print_pipeline_id:
    description: "A very simple command for demonstration purposes that prints pipeline id"
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}

jobs:
  # print_hello:
  #   docker: 
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "hello"
  # print_world:
  #   docker: 
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "world"
  # print_var:
  #   docker: 
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "My undercover name is ${TEST_VAR}"
  # save_hello_world_output:
  #   docker: 
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run: echo "Hello, world!" > ~/output.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - output.txt
  # print_output_file:
  #   docker: 
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     - run: cat ~/output.txt
  # print_pipeline:
  #   docker: 
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - print_pipeline_id
  error_job:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - run: exit 1
      - run:
          name: on error
          command: echo "Hello Error!"
          when: on_fail

workflows:
  starter-jobs:
    jobs:
      # - print_hello
      # - print_world:
      #     requires: 
      #       - print_hello
      # - print_var
      # - save_hello_world_output
      # - print_output_file:
      #     requires:
      #       - save_hello_world_output
      # - print_pipeline
      - error_job